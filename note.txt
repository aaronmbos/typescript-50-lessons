Lesson 11: Typing Objects
 `any` is carefree and careless
 `unknown` is cautious and cause for concern
 - Composite Types
  objects are composite types
  TypeScript is a structural type system
   The structure contract is fulfilled as long as all properties are present for a given type
  All we need to care about is that all the properties needed are available

Lesson 12: Object Type Tool Belt
 `typeof` returns the shape of any object at runtime
 Optional properties are defined with a `?` after the property name

Lesson 13: Typing Classes
 TypeScript erases to JavaScript after the compiler runs
  Compiles down to various versions of ECMAScript
 JavaScript classes work well with TypeScript's type system
 TypeScript is more concerned with the shape of objects instead of the class itself
 Classes are composed of two things
  1. Constructor function
  2. Prototype
 In TypeScript **structure** is important
  Names are sound and smoke
 Classes contribute to value-creation and type-creation

Lesson 14: Interfaces
 Historically interfaces define the blueprint for a class
 If using classes, both types and interfaces can be implemented
 The biggest difference between types and interfaces is **declaration merging**
  For interfaces, declaration merging means we can define the same interface with different properties and they will be merged together
  This is useful for extending objects that we don't own, but use in our code

Chapter 3 Functions

Lesson 15: A Search Function
 Function params are type `any` by default
 Often time function results can be inferred, but explicitly typing them is helpful

Lesson 16: Callbacks
 Complex objects can be defined that contain functions
 Functions are a first-class citizen in JavaScript and can be used as values
  Pass functions to functions as arguments (aka callback function)
  Callbacks are pluggable functions
 TypeScript's structural type system applies to functions as well
  The structure doesn't rely on shape, but by order of arguments and their type

Lesson 17: Substitutability
 TypeScript requires function callers to provide all necessary arguments
 Substitutability comes into play when it is OK to substitute one function for another
  The params don't have to be the same if it won't cause breaking changes
 In JS, all functions have a return value. If the function doesn't return a value explicitly
 the value is undefined
 In TS every function has a return type and if we don't explicitly type or infer, the return type is 
 void by default
 In terms of function return types, anything can be substituted for void

Lesson 18: This and That
 TypeScript allows us to narrow down types for `this` with instanceof to provide safer guard rails
 for our code
 In TypeScript we are allowed to type `this` in a function's parameter `(this: HTMLElement)`
  The parameter gets erased when the TS is compiled down to JavaScript
 TS does its best to inject itself when more typing is needed to improve safety

Lesson 19: The Function Type Tool Belt
 Tagged Template Literals
  The tag for a tagged template literal is a function that has a defined set of params
   First param is a TemplateStringsArray
   Second is a string array with the actual expressions
 Rest Parameters
  Rest params are always optional
  Allow for n amount of params to be included in the function invocation
 Asynchronous Functions
  async functions return promises and their results can be awaited
  `const results = await search('Ember');`
  Functions can be declared as async ie `async function search() {}`
  Return values are automatically wrapped in a promise return type

Lesson 20: Function Overloading
 In TS function overloads are defined on top of the actual implementation
 Overloading in TS can be complicated and should be avoided when possible
 Off the bat, I'm personally not a fan of overloading in TS, but maybe I need to understand it 
 better

Lesson 21: Generator Functions
 In JS generator functions can be exited and later reentered
  Idea being that generators generate a value over the course of time
 Key topics for working with generators
  1. An asterisk around the generator indicating that the function is not ordinary
  2. The generator contains the keyword yield. Passes results to caller, but allows for
  re-entrance on an additional iteration

Chapter 4: Union and Intersection Types

Lesson 22: Modeling Data
 Intersection Types are defined with `&` and can be read "and"
 Combine props from Type A with another Type B
  Similar to extending a class
 The result of intersection is a new type with props of A & B

 Union types are defined with `|` and can be read as "or"
  The type resulting from a union type tries to encompass all possible properties 
  from the types set in union

Lesson 23: Moving in the Type Space
 Set Theory
  `any` and `unknown` are known as top types and contain the set of all available values
  Primitive types are a level below top types and include boolean, string, or number
  Value types include each value of a particular set ie `let conf = 'conference'`

Lesson 24: Working with Value Types
 Discriminated unions help the compiler understand even more about our code!!
  Very helpful with control flow
 Applying const to objects with FIXATE their value types, effectively creating a value type of out an entire object

Lesson 25: Dynamic Unions
Lesson 26: Keys and Type Predicate
 We can use `keyof` to get a union of all of a type's key 
 Type predicates are another form of narrowing that help the compiler determine what type is expected
 Type predicates work with functions that return booleans

Lesson 27: Down at the Bottom: never
 `never` is at the very bottom of the type hierarchy
 Basically behaves like the opposite of `any`
 Cannot assign a value to never
 Never provides a safeguard for scenarios that could occur, but should never occur

Lesson 28: undefined and null
 Both denote the absence of a value and both are bottom values
 undefined: variable has been declared, but no value assigned
 null: is an empty value
 strictNullChecks (part of strict mode) can be set in tsconfig
  All nullish values are excluded from types

Chapter 5: Generics

Lesson 29: I don't know what I want, but I know how to get it
 If we do something in TypeScript that we wouldn't do like that in JavaScript, we should rethink
 Instead of working with a type, we work with a parameter that is substituted for a type
 TypeScript is capable of inferring the type to substitute based on argument type
 Many of JavaScript's built-in APIs and browser APIs use generics

Lesson 30: Generic Constraints
 By default generics cover the entire set of types: `any`
 To constrain a generic type we use the `extends` keyword

Lesson 31: Working with Keys
 We can use keyof with generic type params as well to make sure keys of the generic type are only
 allowed to be passed to the function

Lesson 32: Generic Mapped Types
 Pick is used to specificy keys to be selected from a type to create a new type
 Record creates a dictionary like object
  Comes in handy if we need to create an object type on the fly
 With union types we only need fulfill the contract of one of the union constituent

Lesson 33: Mapped Type Modifiers

Lesson 34: Binding Generics
 TypeScript is able to infer types effectively
 We can use `as const` to protect an object from change and narrow the assignment down
 Another option is to provide an explicit type annotation
 Generic Type Binding
  The process of substituting a concrete type for a generic type is called binding.

 The spread operator creates a combination of two objects and the result is an intersection.
 The intersection of two distinct value types always results in never.

Lesson 35: Generic Type Defaults
